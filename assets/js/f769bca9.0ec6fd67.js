"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[4790],{9300:(e,o,a)=>{a.r(o),a.d(o,{assets:()=>t,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var s=a(4848),n=a(8453);const r={id:"protocolos-e-tipos-primarios",title:"Protocolos e tipos prim\xe1rios",tags:["protocolos","tipos prim\xe1rios","tipos de dados","python"],sidebar_position:6},i=void 0,d={id:"python-base/base/protocolos-e-tipos-primarios",title:"Protocolos e tipos prim\xe1rios",description:"Tipo de dado",source:"@site/docs/python-base/base/protocolos-e-tipos-primarios.md",sourceDirName:"python-base/base",slug:"/python-base/base/protocolos-e-tipos-primarios",permalink:"/albertonoguchi/docs/python-base/base/protocolos-e-tipos-primarios",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-base/base/protocolos-e-tipos-primarios.md",tags:[{label:"protocolos",permalink:"/albertonoguchi/docs/tags/protocolos"},{label:"tipos prim\xe1rios",permalink:"/albertonoguchi/docs/tags/tipos-primarios"},{label:"tipos de dados",permalink:"/albertonoguchi/docs/tags/tipos-de-dados"},{label:"python",permalink:"/albertonoguchi/docs/tags/python"}],version:"current",sidebarPosition:6,frontMatter:{id:"protocolos-e-tipos-primarios",title:"Protocolos e tipos prim\xe1rios",tags:["protocolos","tipos prim\xe1rios","tipos de dados","python"],sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Ambientes virtuais e pacotes",permalink:"/albertonoguchi/docs/python-base/base/ambiente-virtual-pacotes"},next:{title:"Java",permalink:"/albertonoguchi/docs/category/java"}},t={},c=[{value:"Tipo de dado",id:"tipo-de-dado",level:3},{value:"Prim\xe1rios",id:"prim\xe1rios",level:3},{value:"Inteiros",id:"inteiros",level:3}];function l(e){const o={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.h3,{id:"tipo-de-dado",children:"Tipo de dado"}),"\n",(0,s.jsx)(o.p,{children:"Todas as informa\xe7\xf5es que usaremos durante a programa\xe7\xe3o s\xe3o representadas na\nmem\xf3ria do computador atrav\xe9s de um tipo de dado, voc\xea tamb\xe9m vai ouvir os\ntermos classe ou categoria para se referir a mesma coisa."}),"\n",(0,s.jsxs)(o.p,{children:["L\xe1 no comecinho do treinamento n\xf3s falamos brevemente que o computador s\xf3\nentende sequencias de ",(0,s.jsx)(o.code,{children:"0"})," e ",(0,s.jsx)(o.code,{children:"1"}),", os bin\xe1rios, portanto quando fazemos uma\natribui\xe7\xe3o como ",(0,s.jsx)(o.code,{children:"numero = 65"})," o Python precisa preparar o espa\xe7o de mem\xf3ria\nnecess\xe1rio para armazenar o bin\xe1rio ",(0,s.jsx)(o.code,{children:"1000001"})," e junto deste valor armazenar a\nrefer\xeancia aos m\xe9todos e opera\xe7\xf5es suportadas pelo n\xfamero."]}),"\n",(0,s.jsx)(o.p,{children:"Voc\xea pode abrir um terminal Python agora ai e verificar:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:"python3 -c \"print(bin(65))\"\n'0b1000001'\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Acontece que caso o nosso valor seja um texto como em ",(0,s.jsx)(o.code,{children:'letra = "B"'})," o\nvalor ",(0,s.jsx)(o.code,{children:'"B"'}),"vai precisar ser armazenado tamb\xe9m como uma sequ\xeancia bin\xe1ria,\ne voc\xea pode verificar no seu terminal Python."]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:'python -c "print(chr(66))"\nB\n'})}),"\n",(0,s.jsx)(o.p,{children:"e"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:'python3 -c "print(bin(66))"\n0b1000010\n'})}),"\n",(0,s.jsxs)(o.p,{children:["No caso do texto o Python precisa armazenar a sequ\xeancia bin\xe1ria ",(0,s.jsx)(o.code,{children:"1000010"})," e\ntamb\xe9m junto deste valor armazenar a refer\xeancia para a tabela de caracteres\nonde na posi\xe7\xe3o ",(0,s.jsx)(o.code,{children:"66"})," teremos a letra ",(0,s.jsx)(o.code,{children:"B"}),"."]}),"\n",(0,s.jsx)(o.p,{children:"Para simplificar esse conceito, considere que a mem\xf3ria RAM \xe9 uma pasta\nfich\xe1rio de documentos:"}),"\n",(0,s.jsx)(o.p,{children:"E dentro deste fich\xe1rio/arquivo em cada pasta ela possui:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Uma posi\xe7\xe3o (primeira, segunda, teceira)"}),"\n",(0,s.jsx)(o.li,{children:"Uma etiqueta (identificador, vari\xe1vel)"}),"\n",(0,s.jsxs)(o.li,{children:["Um envelope contendo:","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Instru\xe7\xf5es de como usar aquela informa\xe7\xe3o\nA informa\xe7\xe3o em s\xed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(o.p,{children:"Em Python podemos representar esta analogia com:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:'# Colocamos um valor no fich\xe1rio usando a Atribui\xe7\xe3o\n# aproveitamos para colocar uma etiqueta escrita o identificador "letra"\n>>> letra = "B"\n\n# Python teve que achar uma pasta vazia para armazenar nosso valor\n# a fun\xe7\xe3o id() nos diz qual \xe9 n\xfamero dessa posi\xe7\xe3o\n>>> id(letra)\n139862029254896\n\n# Python precisou colocar o valor "100010" dentro de um envelope\n# neste envelope cont\xe9m tamb\xe9m instru\xe7\xf5es de como usar este valor para obter\n# a letra "B".\n# a fun\xe7\xe3o type() nos diz qual tipo de envelope foi usado\n>>> type(letra)\nstr\n'})}),"\n",(0,s.jsx)(o.p,{children:"Todos os objetos em Python s\xe3o formados por essas 3 propriedades:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["valor ",(0,s.jsx)(o.code,{children:'"1000010" ou "B"'})]}),"\n",(0,s.jsxs)(o.li,{children:["tipo ou classe ",(0,s.jsx)(o.code,{children:"str, int, float, ..."})]}),"\n",(0,s.jsxs)(o.li,{children:["posi\xe7\xe3o na mem\xf3ria ",(0,s.jsx)(o.code,{children:"o n\xfamero retornado pela fun\xe7\xe3o id()"})]}),"\n"]}),"\n",(0,s.jsx)(o.p,{children:'Por que usamos tipos de dados?\nPara n\xe3o precisar manipular os dados manualmente, por exemplo, n\xe3o precisamos\nnos preocupar com que cada letra de um texto \xe9 armazenada como um\nn\xfamero bin\xe1rio, usamos os tipos de dados definidos pelas classes para utilizar\nabstra\xe7\xf5es que nos entreguem diretamente a letra "B" que queremos.'}),"\n",(0,s.jsx)(o.p,{children:'Tamb\xe9m n\xe3o precisamos nos preocupar com a posi\xe7\xe3o da mem\xf3ria, para n\xf3s tanto\nfaz se o Python armazenou na primeira ou na \xfaltima pasta da mem\xf3ria, o\nimportante na nossa camada de abstra\xe7\xe3o \xe9 sabermos qual \xe9 a etiqueta colada l\xe1,\ne quando precisamos do valor usamos a etiqueta para encontrar, portanto, se\nquisermos obter o "B" usamos a refer\xeancia "letra".'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:">>> print(letra)\nB\n"})}),"\n",(0,s.jsx)(o.p,{children:"Existem v\xe1rios tipos de dados para representar uma infinidade de valores e\npodemos tamb\xe9m criar os nossos pr\xf3prios tipos de dados."}),"\n",(0,s.jsx)(o.p,{children:"Eles est\xe3o divididos em 2 categorias, os prim\xe1rios e os compostos, vamos\ncome\xe7ar explorando os prim\xe1rios e depois que entendermos todo o seu\nfuncionamento passaremos para os tipos compostos."}),"\n",(0,s.jsx)(o.h3,{id:"prim\xe1rios",children:"Prim\xe1rios"}),"\n",(0,s.jsx)(o.p,{children:'Os tipos prim\xe1rios, tamb\xe9m chamados tipos "escalares" (scalar types), s\xe3o\nutilizados para armazenar uma \xfanica unidade de informa\xe7\xe3o, como, por exemplo,\num n\xfamero ou um texto, como vimos anteriormente.'}),"\n",(0,s.jsx)(o.h3,{id:"inteiros",children:"Inteiros"}),"\n",(0,s.jsxs)(o.p,{children:["O tipo usado para armazenar os n\xfameros inteiros em Python \xe9 representado pela\nclasse ",(0,s.jsx)(o.code,{children:"int"}),". Em Python, n\xf3s n\xe3o precisamos declarar qual o tipo de dado a ser\nusado, pois o Python faz a infer\xeancia de tipos dinamicamente. O interpretador\nprimeiro verifica como o valor se parece e ent\xe3o decide por conta pr\xf3pria qual\na classe a ser utilizada. Abaixo, exemplos de uso de ",(0,s.jsx)(o.code,{children:"int"}),":"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:"# a idade de uma pessoa\nidade = 25\n\n# o c\xf3digo de um produto\ncodigo_produto = 4587\n\n# quantidade de itens\nquantidade = 3\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Em qualquer um dos casos acima, o Python ir\xe1 armazenar como ",(0,s.jsx)(o.code,{children:"int"}),", e voc\xea pode\nusar a fun\xe7\xe3o ",(0,s.jsx)(o.code,{children:"type"})," para verificar:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:">>> type(idade)\nint\n"})}),"\n",(0,s.jsx)(o.p,{children:"Voc\xea at\xe9 pode, se desejar, for\xe7ar o tipo de dado explicitamente, mas isso \xe9\nconsiderado redundante:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:"idade = int(25)  # isso funciona, mas \xe9 redundante\n"})}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.code,{children:"idade"})," \xe9 um identificador que faz refer\xeancia ao valor 25 e n\xf3s podemos fazer\numa variedade de opera\xe7\xf5es com este valor. Essas opera\xe7\xf5es fazem parte do que\nchamamos Protocolo do objeto, e quem define os protocolos que o objeto\nimplementa \xe9 a classe ",(0,s.jsx)(o.code,{children:"int"}),"."]}),"\n",(0,s.jsxs)(o.p,{children:["Voc\xea pode, no seu terminal, verificar todos os protocolos que o ",(0,s.jsx)(o.code,{children:"int"}),"\nimplementa."]}),"\n",(0,s.jsx)(o.p,{children:"Verificando quais comportamentos est\xe3o no protocolo de um tipo de dado.\nVerificando quais comportamentos est\xe3o no protocolo de um tipo de dado."}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:">>> dir(int)\n# atributos especiais da classse int\n['__abs__',\n '__add__',\n '__and__',\n '__bool__',\n '__ceil__',\n '__class__',\n '__delattr__',\n '__dir__',\n '__divmod__',\n '__doc__',\n '__eq__',\n '__float__',\n '__floor__',\n '__floordiv__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getnewargs__',\n '__gt__',\n '__hash__',\n '__index__',\n '__init__',\n '__init_subclass__',\n '__int__',\n '__invert__',\n '__le__',\n '__lshift__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__neg__',\n '__new__',\n '__or__',\n '__pos__',\n '__pow__',\n '__radd__',\n '__rand__',\n '__rdivmod__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rfloordiv__',\n '__rlshift__',\n '__rmod__',\n '__rmul__',\n '__ror__',\n '__round__',\n '__rpow__',\n '__rrshift__',\n '__rshift__',\n '__rsub__',\n '__rtruediv__',\n '__rxor__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__sub__',\n '__subclasshook__',\n '__truediv__',\n '__trunc__',\n '__xor__',\n \n # daqui para baixo est\xe3o atributos p\xfablicos que podemos usar diretamente\n 'as_integer_ratio',\n 'bit_count',\n 'bit_length',\n 'conjugate',\n 'denominator',\n 'from_bytes',\n 'imag',\n 'numerator',\n 'real',\n 'to_bytes']\n"})}),"\n",(0,s.jsxs)(o.p,{children:["A lista acima exibe os nomes de todos os atributos dos objetos armazenados com\na classe ",(0,s.jsx)(o.code,{children:"int"}),". Tudo o que come\xe7a com ",(0,s.jsx)(o.code,{children:"__"})," e termina com ",(0,s.jsx)(o.code,{children:"__"})," s\xe3o chamados de\nm\xe9todos\ndunder e s\xe3o atributos especiais do modelo de dados do Python. N\xe3o precisamos\nusar esses atributos diretamente em nosso c\xf3digo (apesar de \xe0s vezes eles serem\n\xfateis). Normalmente, utilizamos abstra\xe7\xf5es que por baixo dos panos far\xe3o a\nchamada para esses m\xe9todos.\nNeste momento, n\xe3o vamos falar de todos eles, pois s\xe3o muitos, e a ideia \xe9 que\naos poucos voc\xea v\xe1 entendendo conforme utiliza. Mas vamos explorar um exemplo\nsimples e que provavelmente usaremos sempre."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.strong,{children:"Protocolo Addible"})}),"\n",(0,s.jsxs)(o.p,{children:["Um dos m\xe9todos ali na lista retornada pelo ",(0,s.jsx)(o.code,{children:"dir(int)"})," \xe9 chamado ",(0,s.jsx)(o.code,{children:"__add__"})," (\nDunder Add). Add em portugu\xeas significa adicionar e todo objeto em Python\nque possui este m\xe9todo ",(0,s.jsx)(o.code,{children:"__add__"})," n\xf3s chamamos de um objeto Addible. Isso\nsignifica que com este objeto podemos efetuar opera\xe7\xf5es de adi\xe7\xe3o, ou seja,\npodemos somar um n\xfamero a outro."]}),"\n",(0,s.jsx)(o.p,{children:"Exemplo:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:"preco = 10\nimposto = 2\ntotal = preco + imposto\n"})}),"\n",(0,s.jsxs)(o.p,{children:["No exemplo acima, fizemos uma opera\xe7\xe3o de soma utilizando 2 objetos\ninteiros ",(0,s.jsx)(o.code,{children:"preco"})," e ",(0,s.jsx)(o.code,{children:"imposto"}),", e para efetuar a opera\xe7\xe3o usamos o operador ",(0,s.jsx)(o.code,{children:"+"}),",\nque \xe9 exatamente o que aprendemos nas aulas de matem\xe1tica b\xe1sica na escola."]}),"\n",(0,s.jsxs)(o.p,{children:["Acontece que por debaixo dos panos, o Python ao\ninterpretar ",(0,s.jsx)(o.code,{children:"total = preco + imposto"})," vai, na verdade, efetuar outra opera\xe7\xe3o,\nele vai fazer:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:"total = preco.__add__(imposto)\n"})}),"\n",(0,s.jsxs)(o.p,{children:["O operador ",(0,s.jsx)(o.code,{children:"+"})," \xe9 um s\xedmbolo que faz o Python invocar o m\xe9todo ",(0,s.jsx)(o.code,{children:"__add__"})," no\nobjeto que est\xe1 do lado esquerdo de uma express\xe3o."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"IMPORTANTE:"})," No dia a dia, n\xf3s usamos apenas os operadores da forma\nabstra\xedda. Por exemplo: ",(0,s.jsx)(o.code,{children:"1 + 1"}),", ",(0,s.jsx)(o.code,{children:"10 - 8"}),", ",(0,s.jsx)(o.code,{children:"5 * 4"}),", etc. Por\xe9m, \xe9 importante\nvoc\xea saber como isso \xe9 implementado pelo Python, pois atrav\xe9s de uma lista de\natributos voc\xea conseguir\xe1 determinar o que aquele objeto suporta de\nopera\xe7\xf5es. Todos os outros comportamentos que esperamos de um n\xfamero inteiro\ntamb\xe9m estar\xe3o implementados naquela lista, alguns exemplos:"]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["A opera\xe7\xe3o ",(0,s.jsx)(o.code,{children:"preco - desconto"})," internamente \xe9 ",(0,s.jsx)(o.code,{children:"preco.__sub__(desconto)"}),"."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"preco * quantidade"})," \xe9 ",(0,s.jsx)(o.code,{children:"preco.__mul__(quantidade)"}),"."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"preco / parcelas"})," \xe9 ",(0,s.jsx)(o.code,{children:"preco.__div__(parcelas)"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(o.p,{children:["Essas s\xe3o as 4 opera\xe7\xf5es matem\xe1ticas b\xe1sicas, mas para todos os outros\noperadores como potencia\xe7\xe3o ",(0,s.jsx)(o.code,{children:"**"})," -> ",(0,s.jsx)(o.code,{children:"__pow__"}),", m\xf3dulo ",(0,s.jsx)(o.code,{children:"%"})," -> ",(0,s.jsx)(o.code,{children:"__mod__"}),", ter\xe1\nsempre um desses m\xe9todos dunder especiais."]}),"\n",(0,s.jsxs)(o.p,{children:["E n\xe3o apenas para opera\xe7\xf5es matem\xe1ticas, essa l\xf3gica vai seguir para qualquer\noutra express\xe3o do Python, ser\xe1 muito comum n\xf3s fazermos compara\xe7\xf5es como\nfizemos no nosso script ",(0,s.jsx)(o.code,{children:"hello.py"}),":"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:'if current_language == "pt_BR":\n    msg = "Hello, World!"\n'})}),"\n",(0,s.jsxs)(o.p,{children:["A parte ",(0,s.jsx)(o.code,{children:'current_language == "pt_BR"'})," ir\xe1 invocar o protocolo ",(0,s.jsx)(o.code,{children:"Comparable"})," que\nfaz com que o objeto possa ser comparado com outro e o m\xe9todo Dunder que\nimplementa essa funcionalidade \xe9 o ",(0,s.jsx)(o.code,{children:"__eq__"}),". Pode testar com:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:">>> idade = 25\n# Comparando por igualdade\n>>> idade == 25\nTrue\n# O mesmo resultado\n>>> idade.__eq__(25)\nTrue\n"})}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"IMPORTANTE:"})," Lembre-se que n\xe3o usamos o ",(0,s.jsx)(o.code,{children:".__eq__"})," diretamente, quem faz isso\npara n\xf3s \xe9 o interpretador quando ele encontra o sinal de ",(0,s.jsx)(o.code,{children:"=="}),". Teremos um\nm\xe9todo dunder similar ao ",(0,s.jsx)(o.code,{children:"__eq__"})," no objeto para todos os outros operadores de\ncompara\xe7\xe3o, como por\nexemplo ",(0,s.jsx)(o.code,{children:">"})," -> ",(0,s.jsx)(o.code,{children:"__gt__"}),", ",(0,s.jsx)(o.code,{children:"<"})," -> ",(0,s.jsx)(o.code,{children:"__lt__"}),", ",(0,s.jsx)(o.code,{children:">="})," -> ",(0,s.jsx)(o.code,{children:"__ge__"}),", ",(0,s.jsx)(o.code,{children:"<="})," -> ",(0,s.jsx)(o.code,{children:"__le__"})," e\nassim por diante."]}),"\n",(0,s.jsx)(o.p,{children:"Esta mesma l\xf3gica vai ser usada para todos os outros tipos de dados em Python."})]})}function p(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,o,a)=>{a.d(o,{R:()=>i,x:()=>d});var s=a(6540);const n={},r=s.createContext(n);function i(e){const o=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(r.Provider,{value:o},e.children)}}}]);