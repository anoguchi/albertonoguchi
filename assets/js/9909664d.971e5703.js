"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[6424],{5806:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=r(4848),o=r(8453);const s={id:"paradigmas-programacao",title:"Recurs\xe3o, Programa\xe7\xe3o funcional",tags:["funcao","lambda","recursao","funcional","paradigma","python"],sidebar_position:7},t="Paradigmas de programa\xe7\xe3o",i={id:"python-base/base/funcoes/paradigmas-programacao",title:"Recurs\xe3o, Programa\xe7\xe3o funcional",description:"O paradigma de programa\xe7\xe3o imperativo/procedural \xe9 o que usamos na maior parte",source:"@site/docs/python-base/base/funcoes/recursao-programacao-funciona.md",sourceDirName:"python-base/base/funcoes",slug:"/python-base/base/funcoes/paradigmas-programacao",permalink:"/albertonoguchi/docs/python-base/base/funcoes/paradigmas-programacao",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-base/base/funcoes/recursao-programacao-funciona.md",tags:[{label:"funcao",permalink:"/albertonoguchi/docs/tags/funcao"},{label:"lambda",permalink:"/albertonoguchi/docs/tags/lambda"},{label:"recursao",permalink:"/albertonoguchi/docs/tags/recursao"},{label:"funcional",permalink:"/albertonoguchi/docs/tags/funcional"},{label:"paradigma",permalink:"/albertonoguchi/docs/tags/paradigma"},{label:"python",permalink:"/albertonoguchi/docs/tags/python"}],version:"current",sidebarPosition:7,frontMatter:{id:"paradigmas-programacao",title:"Recurs\xe3o, Programa\xe7\xe3o funcional",tags:["funcao","lambda","recursao","funcional","paradigma","python"],sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Fun\xe7\xf5es lambda",permalink:"/albertonoguchi/docs/python-base/base/funcoes/funcoes-lambda"},next:{title:"Debugging",permalink:"/albertonoguchi/docs/python-base/base/funcoes/debugging"}},c={},l=[{value:"Comparativo",id:"comparativo",level:3},{value:"Retry",id:"retry",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"paradigmas-de-programa\xe7\xe3o",children:"Paradigmas de programa\xe7\xe3o"}),"\n",(0,a.jsx)(n.p,{children:"O paradigma de programa\xe7\xe3o imperativo/procedural \xe9 o que usamos na maior parte\ndo tempo neste paradigma as instru\xe7\xf5es s\xe3o definidas uma a uma e utilizamos\naloca\xe7\xe3o de vari\xe1veis para manter o estado do programa."}),"\n",(0,a.jsx)(n.p,{children:"No paradigma funcional usamos fun\xe7\xf5es e a habilidade de podermos passar fun\xe7\xf5es\ncomo argumentos para outras fun\xe7\xf5es e tamb\xe9m o uso de composi\xe7\xe3o com chamadas\nrecursivas e evitamos ao m\xe1ximo a aloca\xe7\xe3o de vari\xe1veis para a fun\xe7\xf5es n\xe3o ter\nefeitos colaterais."}),"\n",(0,a.jsx)(n.h3,{id:"comparativo",children:"Comparativo"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'"""Imprime apenas os nomes iniciados com a letra B"""\n\nnames = [\n    "Bruno",\n    "Joao",\n    "Bernardo",\n    "Barbara",\n    "Brian",\n]\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"estilo funcional"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'print(*list(filter(lambda text: text[0].lower() == "b", names)), sep="\\n")\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Estilo procedural / imperativo"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def starts_with_b(text):\n    """Return bool if text starts with b"""\n    return text[0].lower() == "b"\n\n\nfiltro = filter(starts_with_b, names)\nfiltro = list(filtro)\nfor name in filtro:\n    print(name)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"retry",children:"Retry"}),"\n",(0,a.jsx)(n.p,{children:"As vezes queremos tentar v\xe1rias vezes executar uma tarefa sujeita a erros de\nmaneira que possamos customizar a quantidade de tentativas."}),"\n",(0,a.jsx)(n.p,{children:"Isto \xe9 bastante \xfatil em cen\xe1rios onde dependemos de opera\xe7\xf5es de I/O como\nleitura de arquivos, servidores e servi\xe7os que precisam ser executados etc."}),"\n",(0,a.jsxs)(n.p,{children:["Neste script estamos abrindo um arquivo em modo leitura e lendo as suas linhas\natrav\xe9s do m\xe9todo ",(0,a.jsx)(n.code,{children:"readlines()"})," que nos retorna uma lista contendo cada uma das\nlinhas do arquivo."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"cat errors.py"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\nimport os\nimport sys\n\n# EAFP - Easy to ASk Forgiveness than permission\n# (\xc9 mais f\xe1cil pedir perd\xe3o do que permiss\xe3o)\n\ntry:\n    names = open("names.txt").readlines()  # FileNotFoundError\nexcept FileNotFoundError as e:\n    print(f"{str(e)}.")\n    sys.exit(1)\n    # TODO: Usar retry\nelse:\n    print("Sucesso!!!")\nfinally:\n    print("Execute isso sempre!")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Por\xe9m, caso o arquivo n\xe3o exista teremos um erro chamado ",(0,a.jsx)(n.code,{children:"FileNotFoundError"})]}),"\n",(0,a.jsxs)(n.p,{children:["Logo ap\xf3s o ",(0,a.jsx)(n.code,{children:"sys.exit(1)"})," n\xf3s colocamos um ",(0,a.jsx)(n.code,{children:"TODO: Usar retry"})," e vamos agora\ndesenvolver o retry."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Retry com loop"})}),"\n",(0,a.jsxs)(n.p,{children:["A primeira forma de efetuar um retry \xe9 usando ",(0,a.jsx)(n.code,{children:"loop"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"criamos uma fun\xe7\xe3o que tenta abrir o arquivo um certo n\xfamero de tentativas"}),"\n",(0,a.jsx)(n.li,{children:"chamamos essa fun\xe7\xe3o em nosso script"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\nimport time\nimport logging\n\nlog = logging.Logger("errors")\n\n# EAFP - Easy to ASk Forgiveness than permission\n# (\xc9 mais f\xe1cil pedir perd\xe3o do que permiss\xe3o)\n\n\ndef try_to_open_a_file(filepath, retry=1):\n    for attempt in range(1, retry + 1):\n        print(f"tentativa n\xfamero {attempt}")\n        try:\n            return open(filepath).readline()\n        except FileNotFoundError as e:\n            log.error("ERRO %s", e)\n            time.sleep(2)  \n            # ^ isso aqui \xe9 s\xf3 para fingir que estamos esperando um processo \n            terminar\n        else:\n            print("Sucesso!!!")\n        finally:\n            print("Execute isso sempre!")\n    return []\n\n\nfor line in try_to_open_a_file("names.txt", retry=5):\n    print(line)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["No c\xf3digo acima criamos uma fun\xe7\xe3o que podemos chamar passando o argumento\n",(0,a.jsx)(n.code,{children:"retry=5"})," e esta fun\xe7\xe3o ir\xe1 tentar abrir o arquivo 5 vezes antes de falhar."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Retry com recurs\xe3o"})}),"\n",(0,a.jsx)(n.p,{children:"Recurs\xe3o \xe9 quando uma fun\xe7\xe3o \xe9 capaz de invocar ela mesma para efetuar a\nrepeti\xe7\xe3o de seu pr\xf3prio algoritmo."}),"\n",(0,a.jsx)(n.p,{children:"Python n\xe3o \xe9 uma linguagem otimizada para recurs\xe3o e possui um limite de 1000\nchamadas portanto ao escrever fun\xe7\xf5es recursivas precisamos nos atentar a\nvalida\xe7\xe3o deste limite e entre outros cuidados est\xe1 tamb\xe9m o correto tratamento\nde exceptions e o correto retorno do valor da fun\xe7\xe3o executada."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\nimport time\nimport logging\n\nlog = logging.Logger("errors")\n\n\n# EAFP - Easy to Ask Forgiveness than permission\n# (\xc9 mais f\xe1cil pedir perd\xe3o do que permiss\xe3o)\n\ndef try_to_open_a_file(filepath, retry=1) -> list:\n    """Tries to open a file, if error, retries n times."""\n    if retry > 999:\n        raise ValueError(\n            "Retry cannot be above 999 because of Python recursion limit"\n        )\n\n    try:\n        return open(filepath).readlines()  # FileNotFoundError\n    except FileNotFoundError as e:\n        log.error("ERRO: %s", e)\n        time.sleep(2)\n        if retry > 1:\n            # recurs\xe3o\n            return try_to_open_a_file(filepath, retry=retry - 1)\n    else:\n        print("Sucesso!!!")\n    finally:\n        print("Execute isso sempre!")\n\n    return []\n\n\nfor line in try_to_open_a_file("names.txt", retry=5):\n    print(line)\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>i});var a=r(6540);const o={},s=a.createContext(o);function t(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);