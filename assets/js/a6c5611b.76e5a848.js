"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[5476],{8395:(o,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(4848),s=n(8453);const r={id:"escopos-argumentos-mutaveis-coringas",title:"Escopos e argumentos mut\xe1veis e coringas",tags:["funcao","anatomia","escopo","argumentos mutaveis","coringas","python"],sidebar_position:5},l=void 0,i={id:"python-base/base/funcoes/escopos-argumentos-mutaveis-coringas",title:"Escopos e argumentos mut\xe1veis e coringas",description:"Escopo",source:"@site/docs/python-base/base/funcoes/escopo-argumentos-mutavies-coringa.md",sourceDirName:"python-base/base/funcoes",slug:"/python-base/base/funcoes/escopos-argumentos-mutaveis-coringas",permalink:"/albertonoguchi/docs/python-base/base/funcoes/escopos-argumentos-mutaveis-coringas",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-base/base/funcoes/escopo-argumentos-mutavies-coringa.md",tags:[{label:"funcao",permalink:"/albertonoguchi/docs/tags/funcao"},{label:"anatomia",permalink:"/albertonoguchi/docs/tags/anatomia"},{label:"escopo",permalink:"/albertonoguchi/docs/tags/escopo"},{label:"argumentos mutaveis",permalink:"/albertonoguchi/docs/tags/argumentos-mutaveis"},{label:"coringas",permalink:"/albertonoguchi/docs/tags/coringas"},{label:"python",permalink:"/albertonoguchi/docs/tags/python"}],version:"current",sidebarPosition:5,frontMatter:{id:"escopos-argumentos-mutaveis-coringas",title:"Escopos e argumentos mut\xe1veis e coringas",tags:["funcao","anatomia","escopo","argumentos mutaveis","coringas","python"],sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Anatomia de um fun\xe7\xe3o",permalink:"/albertonoguchi/docs/python-base/base/funcoes/anatomia-funcao"},next:{title:"Fun\xe7\xf5es lambda",permalink:"/albertonoguchi/docs/python-base/base/funcoes/funcoes-lambda"}},c={},d=[{value:"Escopo",id:"escopo",level:2},{value:"Posso acessar uma vari\xe1vel global dentro da fun\xe7\xe3o?",id:"posso-acessar-uma-vari\xe1vel-global-dentro-da-fun\xe7\xe3o",level:3},{value:"Posso alterar o valor de uma vari\xe1vel global dentro de uma fun\xe7\xe3o?",id:"posso-alterar-o-valor-de-uma-vari\xe1vel-global-dentro-de-uma-fun\xe7\xe3o",level:3},{value:"Posso criar uma vari\xe1vel global dentro de uma fun\xe7\xe3o?",id:"posso-criar-uma-vari\xe1vel-global-dentro-de-uma-fun\xe7\xe3o",level:3},{value:"Escopo de argumentos de fun\xe7\xe3o",id:"escopo-de-argumentos-de-fun\xe7\xe3o",level:3},{value:"Fun\xe7\xf5es com valores default",id:"fun\xe7\xf5es-com-valores-default",level:3},{value:"Valores default mut\xe1veis",id:"valores-default-mut\xe1veis",level:3},{value:"Argumentos coringas",id:"argumentos-coringas",level:3}];function t(o){const e={code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.R)(),...o.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{id:"escopo",children:"Escopo"}),"\n",(0,a.jsx)(e.p,{children:"Agora que j\xe1 falamos sobre a anatomia de uma fun\xe7\xe3o, vamos falar sobre o escopo\nde uma fun\xe7\xe3o."}),"\n",(0,a.jsx)(e.p,{children:"Um escopo \xe9 similar a um namespace, um espa\xe7o do c\xf3digo onde os nomes s\xe3o\ndefinidos. O isolamento de escopo \xe9 importante para que n\xe3o haja conflito de\nnomes entre os identificadores."}),"\n",(0,a.jsxs)(e.p,{children:["Por exemplo, se tivermos duas fun\xe7\xf5es e dentro do bloco de c\xf3digo de ambas\nfun\xe7\xf5es atribuirmos uma vari\xe1vel ",(0,a.jsx)(e.code,{children:"nome"}),", o Python cria dentro de cada fun\xe7\xe3o um\nescopo chamado ",(0,a.jsx)(e.code,{children:"local"})," e define esse valor apenas ali dentro."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def nome_da_funcao1():\n    nome = 'valor'\n    nome = nome.upper()\n    return nome\n\ndef nome_da_funcao2():\n    nome = 'outro valor'\n    nome = nome.title()\n    return nome\n\nprint(nome_da_funcao1())\n# VALOR\n\nprint(nome_da_funcao2())\n# Outro Valor\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"Escopo",src:n(7064).A+"",width:"797",height:"469"})}),"\n",(0,a.jsxs)(e.p,{children:["Repare que apesar de terem o mesmo nome, cada fun\xe7\xe3o tem a sua pr\xf3pria vari\xe1vel\n",(0,a.jsx)(e.code,{children:"nome"})," e este identificador existe apenas dentro da fun\xe7\xe3o. (",(0,a.jsx)(e.code,{children:"nome"})," n\xe3o faz\nparte do ",(0,a.jsx)(e.code,{children:"global frame"}),")"]}),"\n",(0,a.jsx)(e.p,{children:"Em um programa Python existem os seguintes escopos:"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"Escopos do python",src:n(275).A+"",width:"349",height:"247"})}),"\n",(0,a.jsx)(e.p,{children:"Vamos ver como isso ficaria no c\xf3digo abaixo:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"nome = 'valor'\n\ndef nome_da_funcao1():\n    nome = 'outro valor'\n    nome = nome.upper()\n    return nome\n\ndef nome_da_funcao2():\n    nome = 'outro valor'\n    nome = nome.title()\n    return nome\n\nprint(nome_da_funcao1())\n# VALOR\n\nprint(nome_da_funcao2())\n# Outro Valor\n\nprint(nome)\n# valor\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"Escopos c\xf3digo python",src:n(6170).A+"",width:"840",height:"585"})}),"\n",(0,a.jsxs)(e.p,{children:["E ao criar uma vari\xe1vel ",(0,a.jsx)(e.code,{children:'nome = "valor"'})," no escopo principal, ou seja, o escopo\nglobal, ela n\xe3o conflita com as vari\xe1veis existentes dentro das fun\xe7\xf5es."]}),"\n",(0,a.jsxs)(e.p,{children:["O ",(0,a.jsx)(e.code,{children:"nome"})," do ",(0,a.jsx)(e.code,{children:"global frame"})," n\xe3o \xe9 o mesmo do ",(0,a.jsx)(e.code,{children:"nome"})," da ",(0,a.jsx)(e.code,{children:"funcao1"})," que n\xe3o \xe9 o\nmesmo ",(0,a.jsx)(e.code,{children:"nome"})," da ",(0,a.jsx)(e.code,{children:"funcao2"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["Para verificar todas as vari\xe1veis do escopo global, podemos usar a fun\xe7\xe3o\n",(0,a.jsx)(e.code,{children:"globals()"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["E dentro de uma fun\xe7\xe3o, para verificar todas as vari\xe1veis do escopo local,\npodemos usar a fun\xe7\xe3o ",(0,a.jsx)(e.code,{children:"locals()"}),"."]}),"\n",(0,a.jsx)(e.h3,{id:"posso-acessar-uma-vari\xe1vel-global-dentro-da-fun\xe7\xe3o",children:"Posso acessar uma vari\xe1vel global dentro da fun\xe7\xe3o?"}),"\n",(0,a.jsxs)(e.p,{children:["Python decide qual \xe9 o escopo de uma vari\xe1vel quando a mesma \xe9 definida, no\nmomento da atribui\xe7\xe3o, portanto, ao criar ",(0,a.jsx)(e.code,{children:'nome = "valor"'})," dentro de uma fun\xe7\xe3o,\no Python determina que ",(0,a.jsx)(e.code,{children:"nome"})," pertence ao escopo local e n\xe3o permite acessar a\nvari\xe1vel ",(0,a.jsx)(e.code,{children:"nome"})," do escopo global."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"nome = 'valor'  # vari\xe1vel global\n\ndef funcao1():\n    nome = 'outro valor'  # vari\xe1vel local\n    # altera\xe7\xe3o ocorre apenas no escopo local\n    nome = nome.upper()  \n    return nome  # o valor de retorno \xe9 o da vari\xe1vel local\n\nprint(funcao1())  # O valor de retorno \xe9 acessado\n# OUTRO VALOR\n\nprint(nome)  # Continua com o valor da vari\xe1vel global\n# valor\nMas se por acaso quisermos acessar a vari\xe1vel nome do escopo global, podemos \nusar a fun\xe7\xe3o globals() que \xe9 um dicion\xe1rio que cont\xe9m todas as vari\xe1veis do \nescopo global.\n\nnome = 'valor'  # vari\xe1vel global\n\ndef funcao1():\n    nome = 'outro valor'  # vari\xe1vel local\n    nome = nome + globals()['nome']  # acesso a vari\xe1vel global  \n    return nome  # o valor de retorno \xe9 o da vari\xe1vel local\n\nprint(funcao1())  # O valor de retorno \xe9 acessado\n# outro valorvalor\n\nprint(nome)  # Continua com o valor da vari\xe1vel global\n# valor\n"})}),"\n",(0,a.jsx)(e.p,{children:"E se a sua fun\xe7\xe3o n\xe3o fizer atribui\xe7\xe3o a uma vari\xe1vel com o mesmo nome de uma\nvari\xe1vel global, ent\xe3o Python ir\xe1 tentar acessar a vari\xe1vel global caso ela n\xe3o\nexista no escopo local."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'nome = "valor"  # vari\xe1vel global\n\ndef funcao1():\n    return nome.upper()  # acesso a vari\xe1vel global\n\nprint(funcao1())\n# VALOR\n'})}),"\n",(0,a.jsx)(e.h3,{id:"posso-alterar-o-valor-de-uma-vari\xe1vel-global-dentro-de-uma-fun\xe7\xe3o",children:"Posso alterar o valor de uma vari\xe1vel global dentro de uma fun\xe7\xe3o?"}),"\n",(0,a.jsx)(e.p,{children:"Se o valor da vari\xe1vel global for imut\xe1vel, ent\xe3o para alterar o apontamento da\nvari\xe1vel global precisaremos dizer ao Python que ao inv\xe9s de estarmos fazendo\numa nova atribui\xe7\xe3o local estamos substituindo o apontamento da vari\xe1vel global."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'nome = "valor" # string imut\xe1vel global\n\ndef muda_nome():\n    # explicitamante dizemos que a variavel \xe9 global\n    global nome\n    # reatribui\xe7\xe3o do apontamento da vari\xe1vel global\n    nome = "outro valor"  \n\nmuda_nome()\n\nprint(nome)\n# outro valor\n'})}),"\n",(0,a.jsx)(e.p,{children:"Outro exemplo"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"contador = 0\n\ndef incrementa_contador():\n    global contador\n    contador += 1\n\nincrementa_contador()\nincrementa_contador()\nprint(contador)\n# 2\n"})}),"\n",(0,a.jsx)(e.p,{children:"Quando o valor da vari\xe1vel global for mut\xe1vel, ent\xe3o podemos diretamente chamar\nseus m\xe9todos para alterar o valor dela."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"numeros = [1, 2, 3]\n\ndef adiciona_numero(numero):\n    numeros.append(numero)\n\nadiciona_numero(4)\nadiciona_numero(5)\nprint(numeros)\n# [1, 2, 3, 4, 5]\n"})}),"\n",(0,a.jsxs)(e.p,{children:["E neste caso n\xe3o \xe9 preciso usar a keyword ",(0,a.jsx)(e.code,{children:"global"})," pois n\xe3o faremos uma\nreatribui\xe7\xe3o de apontamento, apenas chamada de m\xe9todo do protocolo do objeto."]}),"\n",(0,a.jsx)(e.h3,{id:"posso-criar-uma-vari\xe1vel-global-dentro-de-uma-fun\xe7\xe3o",children:"Posso criar uma vari\xe1vel global dentro de uma fun\xe7\xe3o?"}),"\n",(0,a.jsxs)(e.p,{children:["Sim, basta utilizar a palavra ",(0,a.jsx)(e.code,{children:"global"})," antes da vari\xe1vel que desejamos criar\nglobalmente."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def cria_nome():\n    global nome\n    nome = \"valor\"\n\nprint(nome)\n# NameError: name 'nome' is not defined\n\ncria_nome()\nprint(nome)\n# valor\n"})}),"\n",(0,a.jsx)(e.h3,{id:"escopo-de-argumentos-de-fun\xe7\xe3o",children:"Escopo de argumentos de fun\xe7\xe3o"}),"\n",(0,a.jsx)(e.p,{children:"Quando uma fun\xe7\xe3o recebe argumentos, o Python utiliza o nome do argumento para\natribuir uma vari\xe1vel local dentro da fun\xe7\xe3o."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def funcao(nome, sobrenome):\n    print(locals())\n    return nome + sobrenome\n\nnome_completo = funcao("Bruno", "Rocha")\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"Escopos de argumentos",src:n(9941).A+"",width:"857",height:"396"})}),"\n",(0,a.jsx)(e.p,{children:"E isso seria o equivalente a:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def funcao():\n    nome = "Bruno"\n    sobrenome = "Rocha"\n    print(locals())\n    return nome + sobrenome\n\nnome_completo = funcao()\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Portanto todas as regras de escopo continuam valendo, por\xe9m como argumentos de\nfun\xe7\xe3o s\xe3o atribui\xe7\xe3o de vari\xe1veis local, ent\xe3o n\xe3o podemos acessar as\nvari\xe1veis globais com o mesmo nome a n\xe3o ser atrav\xe9s do dict ",(0,a.jsx)(e.code,{children:"globals()"}),"."]}),"\n",(0,a.jsx)(e.h3,{id:"fun\xe7\xf5es-com-valores-default",children:"Fun\xe7\xf5es com valores default"}),"\n",(0,a.jsxs)(e.p,{children:["Os argumentos de uma fun\xe7\xe3o podem ter um valor por defeito, em ingl\xeas ",(0,a.jsx)(e.code,{children:"default"}),"\nque \xe9 o valor que ser\xe1 assumido caso nenhum valor seja passado."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def imprime_nome(nome, sobrenome="Sabugosa"):\n    print(nome, sobrenome)\n\nimprime_nome("Bruno")\n# Bruno Sabugosa\n\nimprime_nome("Bruno", "Rocha")\n# Bruno Rocha\n'})}),"\n",(0,a.jsx)(e.p,{children:"Valores default podem ser de qualquer tipo, e devem ser passados apenas depois\ndos argumentos que n\xe3o possuem valor default."}),"\n",(0,a.jsx)(e.h3,{id:"valores-default-mut\xe1veis",children:"Valores default mut\xe1veis"}),"\n",(0,a.jsx)(e.p,{children:"\xc9 importante tomar bastante cuidado com valores mut\xe1veis, pois como j\xe1 vimos,\ndentro de uma fun\xe7\xe3o, o efeito colateral ser\xe1 a altera\xe7\xe3o do valor global."}),"\n",(0,a.jsx)(e.p,{children:"Este \xe9 um erro muito comum:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def adiciona_a_lista(valor, lista=[]):\n    lista.append(valor)\n    return lista\n\nadiciona_a_lista(4)\nadiciona_a_lista(5)\nprint(adiciona_a_lista(6))\n# [4, 5, 6]\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Para resolver esse tipo de problema o recomendado \xe9 inicializar o valor default\ncom ",(0,a.jsx)(e.code,{children:"None"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def adiciona_a_lista(valor, lista=None):\n    if lista is None:\n        lista = []\n    lista.append(valor)\n    return lista\n\nadiciona_a_lista(4)\nadiciona_a_lista(5)\nprint(adiciona_a_lista(6))\n# [6]\n"})}),"\n",(0,a.jsx)(e.p,{children:"Este cuidado precisa ser tomado com qualquer valor mut\xe1vel como listas,\ndicion\xe1rios, sets."}),"\n",(0,a.jsx)(e.h3,{id:"argumentos-coringas",children:"Argumentos coringas"}),"\n",(0,a.jsxs)(e.p,{children:["Uma fun\xe7\xe3o pode ter um comportamento polim\xf3rfico ao utilizar argumentos\ncoringas (em ingl\xeas: ",(0,a.jsx)(e.code,{children:"star arguments"}),") definidos usando ",(0,a.jsx)(e.code,{children:"*args"})," para argumentos\nposicionais e ",(0,a.jsx)(e.code,{children:"**kwargs"})," para argumentos nomeados."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def funcao(*args, **kwargs):\n    print(args, kwargs)\n\nfuncao(1, 2, 3, nome=\"Bruno\", sobrenome=\"Rocha\")\n# (1, 2, 3) {'nome': 'Bruno', 'sobrenome': 'Rocha'}\n\nfuncao(1, nome=\"Bruno\")\n# (1) {'nome': 'Bruno'}\n\nfuncao(1)\n# (1,) {}\n\nfuncao(sobrenome=\"Rocha\")\n# () {'sobrenome': 'Rocha'}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["As vari\xe1veis locais ",(0,a.jsx)(e.code,{children:"args"})," e ",(0,a.jsx)(e.code,{children:"kwargs"})," s\xe3o uma tupla e um dicion\xe1rio que podem\nser acessados normalmente dentro da fun\xe7\xe3o."]})]})}function m(o={}){const{wrapper:e}={...(0,s.R)(),...o.components};return e?(0,a.jsx)(e,{...o,children:(0,a.jsx)(t,{...o})}):t(o)}},7064:(o,e,n)=>{n.d(e,{A:()=>a});const a=n.p+"assets/images/escopo_01-bc9eb5813c41593d9a0b5a89c5b8b4e0.png"},275:(o,e,n)=>{n.d(e,{A:()=>a});const a=n.p+"assets/images/escopo_02-f0601689703ce25c432cdef5b21bb94f.png"},6170:(o,e,n)=>{n.d(e,{A:()=>a});const a=n.p+"assets/images/escopo_03-7b53b0028dfc9347d9c44009863b1c3f.png"},9941:(o,e,n)=>{n.d(e,{A:()=>a});const a=n.p+"assets/images/escopo_04-ae1538fd2144c4e06d47106051e47f5d.png"},8453:(o,e,n)=>{n.d(e,{R:()=>l,x:()=>i});var a=n(6540);const s={},r=a.createContext(s);function l(o){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function i(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(s):o.components||s:l(o.components),a.createElement(r.Provider,{value:e},o.children)}}}]);